name: ci
on:
  pull_request:
  push:
    branches:
      - main

jobs:
  test:
    name: test
    env:
      CARGO: cargo
      # When CARGO is set to CROSS, this is set to `--target matrix.target`.
      # Note that we only use cross on Linux, so setting a target on a
      # different OS will just use normal cargo.
      TARGET_FLAGS:
      # When CARGO is set to CROSS, TARGET_DIR includes matrix.target.
      TARGET_DIR: ./target
      # Bump this as appropriate. We pin to a version to make sure CI
      # continues to work as cross releases in the past have broken things
      # in subtle ways.
      CROSS_VERSION: v0.2.5
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - build: linux
            os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
          - build: macos-arm64
            os: macos-latest
            rust: stable
            target: aarch64-apple-darwin
          - build: win-msvc
            os: windows-latest
            rust: stable
            target: x86_64-pc-windows-msvc
          - build: win-gnu
            os: windows-latest
            rust: stable-x86_64-gnu
            target: x86_64-pc-windows-gnu
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}

      - name: Set target variables
        shell: bash
        run: |
          echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
          echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV

      - name: Install packages (MacOS)
        if: (matrix.os == 'macos-latest') || (matrix.os == 'macos-latest-large')
        run: |
          brew install libpq
          brew link --force libpq

      - name: Build
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            export PATH="/c/Program Files/PostgreSQL/14/lib:/c/Program Files/PostgreSQL/14/bin:$PATH"
            ${{ env.CARGO }} build --verbose
          else
            PATH="/usr/local/opt/libpq/bin:$PATH" ${{ env.CARGO }} build --verbose
          fi
